<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/src/main/java/com/swing/view/OrderClientFrame.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/swing/view/OrderClientFrame.java" />
              <option name="originalContent" value="package com.swing.view;&#10;&#10;import com.fasterxml.jackson.databind.ObjectMapper;&#10;import okhttp3.*;&#10;&#10;import javax.swing.*;&#10;import javax.swing.border.EmptyBorder;&#10;import javax.swing.table.DefaultTableCellRenderer;&#10;import javax.swing.table.DefaultTableModel;&#10;import java.awt.*;&#10;import java.io.IOException;&#10;import java.util.*;&#10;import java.util.List;&#10;import java.util.concurrent.*;&#10;&#10;&#10;public class OrderClientFrame extends JFrame {&#10;&#10;    private static final Color BUTTON_COLOR = new Color(0, 120, 215);&#10;    private static final Color TABLE_HEADER_COLOR = new Color(230, 230, 250);&#10;    private static final Color TABLE_ROW_ALT_COLOR = new Color(245, 248, 255);&#10;    private static final Font BUTTON_FONT = new Font(&quot;Segoe UI&quot;, Font.BOLD, 14);&#10;    private static final Font TABLE_HEADER_FONT = new Font(&quot;Segoe UI&quot;, Font.BOLD, 14);&#10;    private static final Font TABLE_FONT = new Font(&quot;Segoe UI&quot;, Font.PLAIN, 13);&#10;&#10;&#10;    private final JTextField txtProduto = new JTextField();&#10;    private final JTextField txtQuantidade = new JTextField();&#10;    private final JButton btnEnviar = new JButton(&quot;Enviar Pedido&quot;);&#10;    private final DefaultTableModel model = new DefaultTableModel(new Object[]{&quot;ID&quot;, &quot;Status&quot;}, 0);&#10;    private final JTable table = new JTable(model);&#10;&#10;&#10;    private final OkHttpClient http = new OkHttpClient();&#10;    private final ObjectMapper mapper = new ObjectMapper();&#10;    private final String baseUrl = &quot;http://localhost:8080/api/pedidos&quot;;&#10;    private final Set&lt;String&gt; pendentes = ConcurrentHashMap.newKeySet();&#10;    private final ScheduledExecutorService scheduler = Executors.newSingleThreadScheduledExecutor();&#10;&#10;&#10;    public OrderClientFrame() {&#10;        super(&quot;Pedidos&quot;);&#10;        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);&#10;        setSize(600, 400);&#10;        setLocationRelativeTo(null);&#10;        setLayout(new BorderLayout());&#10;        initComponents();&#10;        scheduler.scheduleAtFixedRate(this::pollStatus, 3, 3, TimeUnit.SECONDS);&#10;        addWindowListener(new java.awt.event.WindowAdapter() {&#10;            @Override public void windowClosing(java.awt.event.WindowEvent e) {&#10;                scheduler.shutdownNow();&#10;            }&#10;        });&#10;    }&#10;&#10;&#10;    private void initComponents() {&#10;        // Campos de texto&#10;        txtProduto.setBorder(BorderFactory.createCompoundBorder(&#10;                txtProduto.getBorder(), new EmptyBorder(8, 8, 8, 8)));&#10;        txtQuantidade.setBorder(BorderFactory.createCompoundBorder(&#10;                txtQuantidade.getBorder(), new EmptyBorder(8, 8, 8, 8)));&#10;&#10;        // Botão&#10;        btnEnviar.setBackground(BUTTON_COLOR);&#10;        btnEnviar.setForeground(Color.WHITE);&#10;        btnEnviar.setFont(BUTTON_FONT);&#10;        btnEnviar.setFocusPainted(true);&#10;        btnEnviar.setBorder(UIManager.getBorder(&quot;Button.border&quot;));&#10;        btnEnviar.addActionListener(e -&gt; enviarPedido());&#10;&#10;        // Painel de formulário&#10;        JPanel form = new JPanel(new GridBagLayout());&#10;        form.setBorder(new EmptyBorder(16, 16, 16, 16));&#10;        GridBagConstraints gbc = new GridBagConstraints();&#10;        gbc.insets = new Insets(0, 8, 0, 8);&#10;        gbc.gridy = 0;&#10;        gbc.gridx = 0;&#10;        form.add(new JLabel(&quot;Produto:&quot;), gbc);&#10;        gbc.gridx = 1;&#10;        txtProduto.setPreferredSize(new Dimension(120, 32));&#10;        form.add(txtProduto, gbc);&#10;        gbc.gridx = 2;&#10;        form.add(new JLabel(&quot;Qtd:&quot;), gbc);&#10;        gbc.gridx = 3;&#10;        txtQuantidade.setPreferredSize(new Dimension(60, 32));&#10;        form.add(txtQuantidade, gbc);&#10;        gbc.gridx = 4;&#10;        form.add(btnEnviar, gbc);&#10;        add(form, BorderLayout.NORTH);&#10;&#10;        // Tabela&#10;        table.setRowHeight(28);&#10;        table.getTableHeader().setFont(TABLE_HEADER_FONT);&#10;        table.getTableHeader().setBackground(TABLE_HEADER_COLOR);&#10;        table.setFont(TABLE_FONT);&#10;        table.setSelectionBackground(new Color(200, 220, 255));&#10;        table.setGridColor(new Color(220, 220, 220));&#10;        table.setShowGrid(true);&#10;        table.setFillsViewportHeight(true);&#10;        table.setDefaultRenderer(Object.class, new DefaultTableCellRenderer() {&#10;            @Override&#10;            public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {&#10;                Component c = super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);&#10;                if (!isSelected) {&#10;                    c.setBackground(row % 2 == 0 ? TABLE_ROW_ALT_COLOR : Color.WHITE);&#10;                }&#10;                return c;&#10;            }&#10;        });&#10;        JScrollPane scroll = new JScrollPane(table);&#10;        scroll.setBorder(new EmptyBorder(8, 16, 16, 16));&#10;        add(scroll, BorderLayout.CENTER);&#10;    }&#10;&#10;    // POJO Pedido para envio&#10;    static class Pedido {&#10;        public String id;&#10;        public String produto;&#10;        public int quantidade;&#10;        public String dataCriacao;&#10;        public Pedido(String id, String produto, int quantidade, String dataCriacao) {&#10;            this.id = id;&#10;            this.produto = produto;&#10;            this.quantidade = quantidade;&#10;            this.dataCriacao = dataCriacao;&#10;        }&#10;    }&#10;&#10;    private void enviarPedido() {&#10;        final String produto = txtProduto.getText().trim();&#10;        final String qtdStr = txtQuantidade.getText().trim();&#10;        if (produto.isEmpty() || qtdStr.isEmpty()) {&#10;            showMessage(&quot;Preencha produto e quantidade.&quot;, &quot;Atenção&quot;, JOptionPane.WARNING_MESSAGE);&#10;            return;&#10;        }&#10;        final int quantidade;&#10;        try {&#10;            quantidade = Integer.parseInt(qtdStr);&#10;        } catch (NumberFormatException ex) {&#10;            showMessage(&quot;Quantidade inválida.&quot;, &quot;Atenção&quot;, JOptionPane.WARNING_MESSAGE);&#10;            return;&#10;        }&#10;        if (quantidade &lt;= 0) {&#10;            showMessage(&quot;Quantidade deve ser maior que zero.&quot;, &quot;Atenção&quot;, JOptionPane.WARNING_MESSAGE);&#10;            return;&#10;        }&#10;        final String id = UUID.randomUUID().toString();&#10;        final String dataCriacao = java.time.LocalDateTime.now().toString();&#10;        Pedido pedido = new Pedido(id, produto, quantidade, dataCriacao);&#10;        MediaType json = MediaType.parse(&quot;application/json&quot;);&#10;        Request req = new Request.Builder()&#10;                .url(baseUrl)&#10;                .post(RequestBody.create(json, toJson(pedido)))&#10;                .build();&#10;        http.newCall(req).enqueue(new Callback() {&#10;            @Override public void onFailure(Call call, IOException e) {&#10;                SwingUtilities.invokeLater(() -&gt; showMessage(&#10;                        &quot;Não foi possível conectar ao servidor.\nPor favor, verifique sua conexão ou tente novamente mais tarde.&quot;,&#10;                        &quot;Erro de conexão&quot;, JOptionPane.ERROR_MESSAGE));&#10;            }&#10;            @Override public void onResponse(Call call, Response response) throws IOException {&#10;                if (response.code() == 202) {&#10;                    // Backend retorna o id, mas já temos o id gerado&#10;                    SwingUtilities.invokeLater(() -&gt; {&#10;                        txtProduto.setText(&quot;&quot;);&#10;                        txtQuantidade.setText(&quot;&quot;);&#10;                        model.addRow(new Object[]{id, &quot;ENVIADO, AGUARDANDO PROCESSO&quot;});&#10;                        pendentes.add(id);&#10;                    });&#10;                } else {&#10;                    final String msg = response.message();&#10;                    SwingUtilities.invokeLater(() -&gt; showMessage(&quot;Erro: &quot; + msg, &quot;Erro&quot;, JOptionPane.ERROR_MESSAGE));&#10;                }&#10;            }&#10;        });&#10;    }&#10;&#10;    private String toJson(Object obj) {&#10;        try {&#10;            return mapper.writeValueAsString(obj);&#10;        } catch (IOException e) {&#10;            throw new RuntimeException(e);&#10;        }&#10;    }&#10;&#10;    private void pollStatus() {&#10;        if (pendentes.isEmpty()) {&#10;            return;&#10;        }&#10;        for (String id : new ArrayList&lt;&gt;(pendentes)) {&#10;            Request req = new Request.Builder()&#10;                    .url(baseUrl + &quot;/status/&quot; + id)&#10;                    .build();&#10;            http.newCall(req).enqueue(new Callback() {&#10;                @Override public void onFailure(Call call, IOException e) {&#10;                    System.out.println(&quot;Falha ao consultar status do pedido &quot; + id + &quot;: &quot; + e.getMessage());&#10;                }&#10;                @Override public void onResponse(Call call, Response response) throws IOException {&#10;                    if (response.isSuccessful()) {&#10;                        String json = response.body().string();&#10;                        Map&lt;?, ?&gt; map = null;&#10;                        try {&#10;                            map = mapper.readValue(json, Map.class);&#10;                        } catch (Exception ex) {&#10;                            System.out.println(&quot;Erro ao fazer parsing do JSON: &quot; + ex.getMessage());&#10;                            System.out.println(&quot;JSON recebido: &quot; + json);&#10;                            return;&#10;                        }&#10;                        final String status = String.valueOf(map.get(&quot;status&quot;)).trim();&#10;                        SwingUtilities.invokeLater(() -&gt; updateOrderStatus(id, status));&#10;                    } else {&#10;                        System.out.println(&quot;Resposta não OK do backend para pedido &quot; + id + &quot;: &quot; + response.code());&#10;                    }&#10;                }&#10;            });&#10;        }&#10;    }&#10;&#10;&#10;    private void updateOrderStatus(String id, String status) {&#10;        boolean found = false;&#10;        String statusExibido = status;&#10;        if (statusExibido != null) statusExibido = statusExibido.trim();&#10;        System.out.println(&quot;Status recebido do backend para pedido &quot; + id + &quot;: '&quot; + statusExibido + &quot;'&quot;);&#10;        if (statusExibido == null || statusExibido.isEmpty() ||&#10;            (!statusExibido.equalsIgnoreCase(&quot;SUCESSO&quot;) &amp;&amp; !statusExibido.equalsIgnoreCase(&quot;FALHA&quot;))) {&#10;            statusExibido = &quot;ENVIADO, AGUARDANDO PROCESSO&quot;;&#10;        }&#10;        for (int i = 0; i &lt; model.getRowCount(); i++) {&#10;            String tableId = String.valueOf(model.getValueAt(i, 0)).trim();&#10;            if (tableId.equals(id)) {&#10;                model.setValueAt(statusExibido, i, 1);&#10;                found = true;&#10;                // Remove da lista de pendentes se status for SUCESSO ou FALHA&#10;                if (status != null &amp;&amp; (status.trim().equalsIgnoreCase(&quot;SUCESSO&quot;) || status.trim().equalsIgnoreCase(&quot;FALHA&quot;))) {&#10;                    pendentes.remove(id);&#10;                }&#10;                break;&#10;            }&#10;        }&#10;    }&#10;&#10;&#10;    private void showMessage(String message, String title, int type) {&#10;        JOptionPane.showMessageDialog(this, message, title, type);&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.swing.view;&#10;&#10;import com.fasterxml.jackson.databind.ObjectMapper;&#10;import okhttp3.*;&#10;&#10;import javax.swing.*;&#10;import javax.swing.border.EmptyBorder;&#10;import javax.swing.table.DefaultTableCellRenderer;&#10;import javax.swing.table.DefaultTableModel;&#10;import java.awt.*;&#10;import java.io.IOException;&#10;import java.util.*;&#10;import java.util.List;&#10;import java.util.concurrent.*;&#10;&#10;&#10;public class OrderClientFrame extends JFrame {&#10;&#10;    private static final Color BUTTON_COLOR = new Color(0, 120, 215);&#10;    private static final Color TABLE_HEADER_COLOR = new Color(230, 230, 250);&#10;    private static final Color TABLE_ROW_ALT_COLOR = new Color(245, 248, 255);&#10;    private static final Font BUTTON_FONT = new Font(&quot;Segoe UI&quot;, Font.BOLD, 14);&#10;    private static final Font TABLE_HEADER_FONT = new Font(&quot;Segoe UI&quot;, Font.BOLD, 14);&#10;    private static final Font TABLE_FONT = new Font(&quot;Segoe UI&quot;, Font.PLAIN, 13);&#10;&#10;&#10;    private final JTextField txtProduto = new JTextField();&#10;    private final JTextField txtQuantidade = new JTextField();&#10;    private final JButton btnEnviar = new JButton(&quot;Enviar Pedido&quot;);&#10;    private final DefaultTableModel model = new DefaultTableModel(new Object[]{&quot;ID&quot;, &quot;Status&quot;}, 0);&#10;    private final JTable table = new JTable(model);&#10;&#10;&#10;    private final OkHttpClient http = new OkHttpClient();&#10;    private final ObjectMapper mapper = new ObjectMapper();&#10;    private final String baseUrl = &quot;http://localhost:8080/api/pedidos&quot;;&#10;    private final Set&lt;String&gt; pendentes = ConcurrentHashMap.newKeySet();&#10;    private final ScheduledExecutorService scheduler = Executors.newSingleThreadScheduledExecutor();&#10;&#10;&#10;    public OrderClientFrame() {&#10;        super(&quot;Pedidos&quot;);&#10;        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);&#10;        setSize(600, 400);&#10;        setLocationRelativeTo(null);&#10;        setLayout(new BorderLayout());&#10;        initComponents();&#10;        scheduler.scheduleAtFixedRate(this::pollStatus, 3, 3, TimeUnit.SECONDS);&#10;        addWindowListener(new java.awt.event.WindowAdapter() {&#10;            @Override public void windowClosing(java.awt.event.WindowEvent e) {&#10;                scheduler.shutdownNow();&#10;            }&#10;        });&#10;    }&#10;&#10;&#10;    private void initComponents() {&#10;        // Campos de texto&#10;        txtProduto.setBorder(BorderFactory.createCompoundBorder(&#10;                txtProduto.getBorder(), new EmptyBorder(8, 8, 8, 8)));&#10;        txtQuantidade.setBorder(BorderFactory.createCompoundBorder(&#10;                txtQuantidade.getBorder(), new EmptyBorder(8, 8, 8, 8)));&#10;&#10;        // Botão&#10;        btnEnviar.setBackground(BUTTON_COLOR);&#10;        btnEnviar.setForeground(Color.WHITE);&#10;        btnEnviar.setFont(BUTTON_FONT);&#10;        btnEnviar.setFocusPainted(true);&#10;        btnEnviar.setBorder(UIManager.getBorder(&quot;Button.border&quot;));&#10;        btnEnviar.addActionListener(e -&gt; enviarPedido());&#10;&#10;        // Painel de formulário&#10;        JPanel form = new JPanel(new GridBagLayout());&#10;        form.setBorder(new EmptyBorder(16, 16, 16, 16));&#10;        GridBagConstraints gbc = new GridBagConstraints();&#10;        gbc.insets = new Insets(0, 8, 0, 8);&#10;        gbc.gridy = 0;&#10;        gbc.gridx = 0;&#10;        form.add(new JLabel(&quot;Produto:&quot;), gbc);&#10;        gbc.gridx = 1;&#10;        txtProduto.setPreferredSize(new Dimension(120, 32));&#10;        form.add(txtProduto, gbc);&#10;        gbc.gridx = 2;&#10;        form.add(new JLabel(&quot;Qtd:&quot;), gbc);&#10;        gbc.gridx = 3;&#10;        txtQuantidade.setPreferredSize(new Dimension(60, 32));&#10;        form.add(txtQuantidade, gbc);&#10;        gbc.gridx = 4;&#10;        form.add(btnEnviar, gbc);&#10;        add(form, BorderLayout.NORTH);&#10;&#10;        // Tabela&#10;        table.setRowHeight(28);&#10;        table.getTableHeader().setFont(TABLE_HEADER_FONT);&#10;        table.getTableHeader().setBackground(TABLE_HEADER_COLOR);&#10;        table.setFont(TABLE_FONT);&#10;        table.setSelectionBackground(new Color(200, 220, 255));&#10;        table.setGridColor(new Color(220, 220, 220));&#10;        table.setShowGrid(true);&#10;        table.setFillsViewportHeight(true);&#10;        table.setDefaultRenderer(Object.class, new DefaultTableCellRenderer() {&#10;            @Override&#10;            public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {&#10;                Component c = super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);&#10;                if (!isSelected) {&#10;                    c.setBackground(row % 2 == 0 ? TABLE_ROW_ALT_COLOR : Color.WHITE);&#10;                }&#10;                return c;&#10;            }&#10;        });&#10;        JScrollPane scroll = new JScrollPane(table);&#10;        scroll.setBorder(new EmptyBorder(8, 16, 16, 16));&#10;        add(scroll, BorderLayout.CENTER);&#10;    }&#10;&#10;    // POJO Pedido para envio&#10;    static class Pedido {&#10;        public String id;&#10;        public String produto;&#10;        public int quantidade;&#10;        public String dataCriacao;&#10;        public Pedido(String id, String produto, int quantidade, String dataCriacao) {&#10;            this.id = id;&#10;            this.produto = produto;&#10;            this.quantidade = quantidade;&#10;            this.dataCriacao = dataCriacao;&#10;        }&#10;    }&#10;&#10;    private void enviarPedido() {&#10;        final String produto = txtProduto.getText().trim();&#10;        final String qtdStr = txtQuantidade.getText().trim();&#10;        if (produto.isEmpty() || qtdStr.isEmpty()) {&#10;            showMessage(&quot;Preencha produto e quantidade.&quot;, &quot;Atenção&quot;, JOptionPane.WARNING_MESSAGE);&#10;            return;&#10;        }&#10;        final int quantidade;&#10;        try {&#10;            quantidade = Integer.parseInt(qtdStr);&#10;        } catch (NumberFormatException ex) {&#10;            showMessage(&quot;Quantidade inválida.&quot;, &quot;Atenção&quot;, JOptionPane.WARNING_MESSAGE);&#10;            return;&#10;        }&#10;        if (quantidade &lt;= 0) {&#10;            showMessage(&quot;Quantidade deve ser maior que zero.&quot;, &quot;Atenção&quot;, JOptionPane.WARNING_MESSAGE);&#10;            return;&#10;        }&#10;        final String id = UUID.randomUUID().toString();&#10;        final String dataCriacao = java.time.LocalDateTime.now().toString();&#10;        Pedido pedido = new Pedido(id, produto, quantidade, dataCriacao);&#10;        MediaType json = MediaType.parse(&quot;application/json&quot;);&#10;        Request req = new Request.Builder()&#10;                .url(baseUrl)&#10;                .post(RequestBody.create(json, toJson(pedido)))&#10;                .build();&#10;        http.newCall(req).enqueue(new Callback() {&#10;            @Override public void onFailure(Call call, IOException e) {&#10;                SwingUtilities.invokeLater(() -&gt; showMessage(&#10;                        &quot;Não foi possível conectar ao servidor.\nPor favor, verifique sua conexão ou tente novamente mais tarde.&quot;,&#10;                        &quot;Erro de conexão&quot;, JOptionPane.ERROR_MESSAGE));&#10;            }&#10;            @Override public void onResponse(Call call, Response response) throws IOException {&#10;                if (response.code() == 202) {&#10;                    // Backend retorna o id, mas já temos o id gerado&#10;                    SwingUtilities.invokeLater(() -&gt; {&#10;                        txtProduto.setText(&quot;&quot;);&#10;                        txtQuantidade.setText(&quot;&quot;);&#10;                        model.addRow(new Object[]{id, &quot;ENVIADO, AGUARDANDO PROCESSO&quot;});&#10;                        pendentes.add(id);&#10;                    });&#10;                } else {&#10;                    final String msg = response.message();&#10;                    SwingUtilities.invokeLater(() -&gt; showMessage(&quot;Erro: &quot; + msg, &quot;Erro&quot;, JOptionPane.ERROR_MESSAGE));&#10;                }&#10;            }&#10;        });&#10;    }&#10;&#10;    private String toJson(Object obj) {&#10;        try {&#10;            return mapper.writeValueAsString(obj);&#10;        } catch (IOException e) {&#10;            throw new RuntimeException(e);&#10;        }&#10;    }&#10;&#10;    private void pollStatus() {&#10;        if (pendentes.isEmpty()) {&#10;            return;&#10;        }&#10;        for (String id : new ArrayList&lt;&gt;(pendentes)) {&#10;            Request req = new Request.Builder()&#10;                    .url(baseUrl + &quot;/status/&quot; + id)&#10;                    .build();&#10;            http.newCall(req).enqueue(new Callback() {&#10;                @Override public void onFailure(Call call, IOException e) {&#10;                    System.out.println(&quot;Falha ao consultar status do pedido &quot; + id + &quot;: &quot; + e.getMessage());&#10;                }&#10;                @Override public void onResponse(Call call, Response response) throws IOException {&#10;                    if (response.isSuccessful()) {&#10;                        String json = response.body().string();&#10;                        Map&lt;?, ?&gt; map = null;&#10;                        try {&#10;                            map = mapper.readValue(json, Map.class);&#10;                        } catch (Exception ex) {&#10;                            System.out.println(&quot;Erro ao fazer parsing do JSON: &quot; + ex.getMessage());&#10;                            System.out.println(&quot;JSON recebido: &quot; + json);&#10;                            return;&#10;                        }&#10;                        final String status = String.valueOf(map.get(&quot;status&quot;)).trim();&#10;                        SwingUtilities.invokeLater(() -&gt; updateOrderStatus(id, status));&#10;                    } else {&#10;                        System.out.println(&quot;Resposta não OK do backend para pedido &quot; + id + &quot;: &quot; + response.code());&#10;                    }&#10;                }&#10;            });&#10;        }&#10;    }&#10;&#10;&#10;    private void updateOrderStatus(String id, String status) {&#10;        boolean found = false;&#10;        String statusExibido = status;&#10;        if (statusExibido != null) statusExibido = statusExibido.trim();&#10;        System.out.println(&quot;Status recebido do backend para pedido &quot; + id + &quot;: '&quot; + statusExibido + &quot;'&quot;);&#10;        if (statusExibido == null || statusExibido.isEmpty()) {&#10;            statusExibido = &quot;ENVIADO, AGUARDANDO PROCESSO&quot;;&#10;        }&#10;        String statusLower = statusExibido.toLowerCase();&#10;        boolean isFinal = statusLower.contains(&quot;suces&quot;) || statusLower.contains(&quot;falha&quot;);&#10;        for (int i = 0; i &lt; model.getRowCount(); i++) {&#10;            String tableId = String.valueOf(model.getValueAt(i, 0)).trim();&#10;            if (tableId.equals(id)) {&#10;                model.setValueAt(statusExibido, i, 1);&#10;                if (isFinal) {&#10;                    pendentes.remove(id);&#10;                }&#10;                found = true;&#10;                break;&#10;            }&#10;        }&#10;    }&#10;&#10;&#10;    private void showMessage(String message, String title, int type) {&#10;        JOptionPane.showMessageDialog(this, message, title, type);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>